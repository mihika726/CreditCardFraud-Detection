# -*- coding: utf-8 -*-
"""creditcardfraud-1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oqKgKAF-QIhtigYYyXVWE5JYjrdEJ9xm
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

#loading the dataset to a Pandas DataFrame
df=pd.read_csv('/content/drive/MyDrive/creditcard.csv')

df.head()

df.tail()

df.info()

#checking number of missing values in each coloumn
df.isnull().sum()

#replacing null values with empty string method called imputation
df = df.fillna('')

df.isnull()

df.tail()

#distribution of legit & fraudulent transactions
df['Class'].value_counts()

"""The data set is highly unbalanced

0--> Legit
1--> fraud
"""

#separating data for analysis
legit= df[df.Class == 0] #the entire row will be stored in this variable
fraud= df[df.Class == 1]

print(legit.shape)

print(fraud.shape)

#statistical measures of the data
legit.Amount.describe()

fraud.Amount.describe()

df.groupby('Class').mean()

"""Under-sampling
Build a sample dataset containing similar distribution of normal transactions and fraudulent transactions
"""

legit_sample=legit.sample(n=73)  #we take transactions from legit sample same as fraud's no and add them to fraud dataset

#concatenating two dataframes
new_dataset = pd.concat([legit_sample,fraud],axis=0)  #axis=0 for rows and 1 for col

new_dataset.head()

new_dataset.tail()

new_dataset['Class'].value_counts()

new_dataset.groupby('Class').mean()

"""Splitting data into features and targets"""

X= new_dataset.drop(columns='Class',axis=1)
Y= new_dataset['Class']

print(X)

print(Y)

"""Split the data into training and testing data"""

X_train,X_test,Y_train,Y_test = train_test_split(X,Y, test_size=0.2,stratify=Y,random_state=2)

print(X.shape,X_train.shape,X_test.shape)

"""Model Training"""

#logisticRegression
model = LogisticRegression()

model.fit(X_train, Y_train)

#accuracy score
X_train_prediction= model.predict(X_train)
training_data_accuracy=accuracy_score(X_train_prediction, Y_train)

print('Accuracy on Training data:', training_data_accuracy)

#accuracy on test data
X_test_prediction=model.predict(X_test)
testing_data_accuracy=accuracy_score(X_test_prediction,Y_test)

print('Accuracy score on test data:',testing_data_accuracy)

"""Random forest"""

from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report

rf_model = RandomForestClassifier(n_estimators=100, random_state=42)
rf_model.fit(X_train, Y_train)

y_pred = rf_model.predict(X_test)

accuracy = accuracy_score(Y_test, y_pred)
print(f"Accuracy: {accuracy:.2f}")


print(classification_report(Y_test, y_pred))

"""Apply gradient boosting



"""

!pip install xgboost

import pandas as pd
from sklearn.model_selection import train_test_split
from xgboost import XGBClassifier
from sklearn.metrics import accuracy_score, classification_report

xgb_model = XGBClassifier()
xgb_model.fit(X_train, Y_train)
xgb_pred = xgb_model.predict(X_test)

#accuracy
xgb_accuracy = accuracy_score(Y_test, xgb_pred)
print(f"XGBoost Accuracy: {xgb_accuracy:.2f}")
print(classification_report(Y_test, xgb_pred))

# Feature importance
feature_importance = pd.Series(xgb_model.feature_importances_, index=X.columns)
feature_importance.sort_values(ascending=False, inplace=True)
print(feature_importance)

pip install streamlit

import streamlit as st

# create Streamlit app
st.title("Credit Card Fraud Detection Model")
st.write("Enter the following features to check if the transaction is legitimate or fraudulent:")

# create input fields for user to enter feature values
input_df = st.text_input('Input All features')
input_df_lst = input_df.split(',')
# create a button to submit input and get prediction
submit = st.button("Submit")

if submit:
    # get input feature values
    features = np.array(input_df_lst, dtype=np.float64)
    # make prediction
    prediction = model.predict(features.reshape(1,-1))
    # display result
    if prediction[0] == 0:
        st.write("Legitimate transaction")
    else:
        st.write("Fraudulent transaction")

!streamlit run /usr/local/lib/python3.10/dist-packages/colab_kernel_launcher.py

